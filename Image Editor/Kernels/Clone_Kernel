__kernel void intial_guess(__global const int * scene, __global const int * clone, __global const float * mask, __global int * result){
int INTERIOR = 0;
int EXTERIOR = 1;
int BORDER = 2;

int group_id = get_group_id(0);
int group_size   = get_local_size(0);
int local_number = get_local_id(0);

int i = (group_id * group_size) + local_number;

int maskValue = mask[i];

if(maskValue != INTERIOR){
	result[i] = scene[i];
}
else{
	result[i] = clone[i];
}

}


__kernel void generate_mask(__global const int * dimensions, __global const float * alpha, __global float * mask){
int INTERIOR = 0;
int EXTERIOR = 1;
int BORDER = 2;

int group_id = get_group_id(0);
int group_size   = get_local_size(0);
int local_number = get_local_id(0);

int i = (group_id * group_size) + local_number;

int cloneHeight = dimensions[0];
int cloneWidth = dimensions[1];

int row = i / cloneWidth;
int col = i % cloneWidth;


int northAdjust = row - 1;
int southAdjust = row + 1;
int eastAdjust = col + 1;
int westAdjust = col - 1;


int northIndex = northAdjust * cloneWidth + col;
int southIndex = southAdjust * cloneWidth + col;
int eastIndex = row * cloneWidth + eastAdjust;
int westIndex = row * cloneWidth + westAdjust;

float currentAlpha = alpha[i];

if(currentAlpha == 0.0){
	mask[i] = EXTERIOR;
}
else{
	
	float north = -3.14;
	float south = -3.14;
	float east = -3.14;
	float west = -3.14;
	
	if(northAdjust >= 0){
		north = alpha[northIndex];
	}
	
	if(southAdjust < cloneHeight){
		south = alpha[southIndex];
	}
	
	if(eastAdjust < cloneWidth){
		east = alpha[eastIndex];
	}
	
	if(westAdjust >= 0){
		west = alpha[westIndex];
	}
	
	if(north != 0.0 && south != 0.0 && east != 0.0 && west != 0.0){
		mask[i] = INTERIOR;
	}
	else{
		mask[i] = BORDER;
	}
	
}

}








__kernel void seperate_channels(__global const int * data, __global float * redData, __global float * blueData, __global float * greenData, __global float * alphaData){
int ALPHA_MASK = 0xff000000;
int ALPHA_OFFSET = 24;
int RED_MASK = 0x00ff0000;
int RED_OFFSET = 16;
int GREEN_MASK = 0x0000ff00;
int GREEN_OFFSET = 8;
int BLUE_MASK = 0x000000ff;
int BLUE_OFFSET = 0;


int group_id = get_group_id(0);
int group_size   = get_local_size(0);
int local_number = get_local_id(0);

int i = (group_id * group_size) + local_number;


int pixel = data[i];

int red = (pixel & RED_MASK) >> RED_OFFSET;
int green = (pixel & GREEN_MASK) >> GREEN_OFFSET;
int blue = (pixel & BLUE_MASK) >> BLUE_OFFSET;
int alpha = (pixel & ALPHA_MASK) >> ALPHA_OFFSET;

redData[i] = (float) red;
blueData[i] = (float) blue;
greenData[i] = (float) green;
alphaData[i] = (float) alpha;



}