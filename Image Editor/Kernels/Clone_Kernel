__kernel void improve_clone(__global const int * dimensions, 
__global const float * redScene, __global const float * greenScene, __global const float * blueScene,
__global const float * redClone, __global const float * greenClone, __global const float * blueClone,
__global const int * mask, 
__global const float * redMerged, __global const float * greenMerged, __global const float * blueMerged,
__global float * redResult, __global float * greenResult, __global float * blueResult){
int INTERIOR = 0;
int EXTERIOR = 1;
int BORDER = 2;

int group_id = get_group_id(0);
int group_size   = get_local_size(0);
int local_number = get_local_id(0);

int i = (group_id * group_size) + local_number;


int height = dimensions[0];
int width = dimensions[1];

int row = i / width;
int col = i % width;

int northAdjust = row - 1;
int southAdjust = row + 1;
int eastAdjust = col + 1;
int westAdjust = col - 1;


int northIndex = northAdjust * width + col;
int southIndex = southAdjust * width + col;
int eastIndex = row * width + eastAdjust;
int westIndex = row * width + westAdjust;

float redA = 0;
float greenA = 0;
float blueA = 0;

float redB = 0;
float greenB = 0;
float blueB = 0;


float redC = 0;
float greenC = 0;
float blueC = 0; 


int neighborCount = 0;

float currentCloneRed = redClone[i];
float currentCloneGreen = greenClone[i];
float currentCloneBlue = blueClone[i];

float redValue = 0; 
float greenValue = 0;
float blueValue = 0;

if(mask[i] == INTERIOR){
	if(northAdjust >= 0){
		int northMask = mask[northIndex]; 
	
		float redMergedNorth = redMerged[northIndex];
		float greenMergedNorth = greenMerged[northIndex];
		float blueMergedNorth = blueMerged[northIndex];
		
		float redSceneNorth = redScene[northIndex];
		float greenSceneNorth = greenScene[northIndex];
		float blueSceneNorth = blueScene[northIndex];
		
		
		float redCloneNorth = redClone[northIndex];
		float greenCloneNorth = greenClone[northIndex];
		float blueCloneNorth = blueClone[northIndex];
		
		
		if(northMask == INTERIOR){
			redA += redMergedNorth;
			greenA += greenMergedNorth;
			blueA += blueMergedNorth;
		}
		else if(northMask == BORDER){
			redB += redSceneNorth;
			greenB += greenSceneNorth;
			blueB += blueSceneNorth;
		}
		
		redC += (currentCloneRed - redCloneNorth);
		greenC += (currentCloneGreen - greenCloneNorth);
		blueC += (currentCloneBlue - blueCloneNorth);
	
		neighborCount++;
	}
		
	if(southAdjust < height){
		int southMask = mask[southIndex];
	
		float redMergedSouth = redMerged[southIndex];
		float greenMergedSouth = greenMerged[southIndex];
		float blueMergedSouth = blueMerged[southIndex];
		
		float redSceneSouth = redScene[southIndex];
		float greenSceneSouth = greenScene[southIndex];
		float blueSceneSouth = blueScene[southIndex];
		
		
		float redCloneSouth = redClone[southIndex];
		float greenCloneSouth = greenClone[southIndex];
		float blueCloneSouth = blueClone[southIndex];
		
		if(southMask == INTERIOR){
			redA += redMergedSouth;
			greenA += greenMergedSouth;
			blueA += blueMergedSouth;
		}
		else if(southMask == BORDER){
			redB += redSceneSouth;
			greenB += greenSceneSouth;
			blueB += blueSceneSouth;
		}
		
		redC += (currentCloneRed - redCloneSouth);
		greenC += (currentCloneGreen - greenCloneSouth);
		blueC += (currentCloneBlue - blueCloneSouth);
	
		neighborCount++;
	}
		
	if(eastAdjust < width){
		int eastMask = mask[eastIndex];
		
		float redMergedEast = redMerged[eastIndex];
		float greenMergedEast = greenMerged[eastIndex];
		float blueMergedEast = blueMerged[eastIndex];
		
		float redSceneEast = redScene[eastIndex];
		float greenSceneEast = greenScene[eastIndex];
		float blueSceneEast = blueScene[eastIndex];
		
		
		float redCloneEast = redClone[eastIndex];
		float greenCloneEast = greenClone[eastIndex];
		float blueCloneEast = blueClone[eastIndex];
		
		if(eastMask == INTERIOR){
			redA += redMergedEast;
			greenA += greenMergedEast;
			blueA += blueMergedEast;
		}
		else if(eastMask == BORDER){
			redB += redSceneEast;
			greenB += greenSceneEast;
			blueB += blueSceneEast;
		}
	
		redC += (currentCloneRed - redCloneEast);
		greenC += (currentCloneGreen - greenCloneEast);
		blueC += (currentCloneBlue - blueCloneEast);
	
		neighborCount++;
	}
		
	if(westAdjust >= 0){
		int westMask = mask[westIndex];
	
		float redMergedWest = redMerged[westIndex];
		float greenMergedWest = greenMerged[westIndex];
		float blueMergedWest = blueMerged[westIndex];
		
		float redSceneWest = redScene[westIndex];
		float greenSceneWest = greenScene[westIndex];
		float blueSceneWest = blueScene[westIndex];
		
		
		float redCloneWest = redClone[westIndex];
		float greenCloneWest = greenClone[westIndex];
		float blueCloneWest = blueClone[westIndex];
		
		if(westMask == INTERIOR){
			redA += redMergedWest;
			greenA += greenMergedWest;
			blueA += blueMergedWest;
		}
		else if(westMask == BORDER){
			redB += redSceneWest;
			greenB += greenSceneWest;
			blueB += blueSceneWest;
		}
		
		redC += (currentCloneRed - redCloneWest);
		greenC += (currentCloneGreen - greenCloneWest);
		blueC += (currentCloneBlue - blueCloneWest);
		
		neighborCount++;
	}
	
	redValue = (redA + redB + redC) / neighborCount;
	greenValue = (greenA + greenB + greenC) / neighborCount;
	blueValue = (blueA + blueB + blueC) / neighborCount;

}
else{
	redValue = redMerged[i];
	greenValue = greenMerged[i];
	blueValue = blueMerged[i];
}	

//redResult[i] = redValue;
//greenResult[i] = greenValue;
//blueResult[i] = blueValue;

redResult[i] = redMerged[i];
greenResult[i] = greenMerged[i];
blueResult[i] = blueMerged[i];


}


__kernel void intial_guess(__global const int * scene, __global const int * clone, __global const int * mask, __global int * result){
int INTERIOR = 0;
int EXTERIOR = 1;
int BORDER = 2;

int group_id = get_group_id(0);
int group_size   = get_local_size(0);
int local_number = get_local_id(0);

int i = (group_id * group_size) + local_number;

int maskValue = mask[i];

if(maskValue != INTERIOR){
	result[i] = scene[i];
}
else{
	result[i] = clone[i];
}

}


__kernel void generate_mask(__global const int * dimensions, __global const float * alpha, __global int * mask){
int INTERIOR = 0;
int EXTERIOR = 1;
int BORDER = 2;

int group_id = get_group_id(0);
int group_size   = get_local_size(0);
int local_number = get_local_id(0);

int i = (group_id * group_size) + local_number;

int cloneHeight = dimensions[0];
int cloneWidth = dimensions[1];

int row = i / cloneWidth;
int col = i % cloneWidth;


int northAdjust = row - 1;
int southAdjust = row + 1;
int eastAdjust = col + 1;
int westAdjust = col - 1;


int northIndex = northAdjust * cloneWidth + col;
int southIndex = southAdjust * cloneWidth + col;
int eastIndex = row * cloneWidth + eastAdjust;
int westIndex = row * cloneWidth + westAdjust;

float currentAlpha = alpha[i];

if(currentAlpha == 0.0){
	mask[i] = EXTERIOR;
}
else{
	
	float north = -3.14;
	float south = -3.14;
	float east = -3.14;
	float west = -3.14;
	
	if(northAdjust >= 0){
		north = alpha[northIndex];
	}
	
	if(southAdjust < cloneHeight){
		south = alpha[southIndex];
	}
	
	if(eastAdjust < cloneWidth){
		east = alpha[eastIndex];
	}
	
	if(westAdjust >= 0){
		west = alpha[westIndex];
	}
	
	if(north != 0.0 && south != 0.0 && east != 0.0 && west != 0.0){
		mask[i] = INTERIOR;
	}
	else{
		mask[i] = BORDER;
	}
	
}

}




__kernel void int_cast(__global const float * redChannel, __global const float * greenChannel, __global const float * blueChannel, __global const float * alphaChannel, __global int * result){
int ALPHA_MASK = 0xff000000;
int ALPHA_OFFSET = 24;
int RED_MASK = 0x00ff0000;
int RED_OFFSET = 16;
int GREEN_MASK = 0x0000ff00;
int GREEN_OFFSET = 8;
int BLUE_MASK = 0x000000ff;
int BLUE_OFFSET = 0;


int group_id = get_group_id(0);
int group_size   = get_local_size(0);
int local_number = get_local_id(0);

int i = (group_id * group_size) + local_number;

int red = (int) redChannel[i];
int green = (int) greenChannel[i];
int blue = (int) blueChannel[i];
int alpha = (int) alphaChannel[i];

if(red > 255){
	red = 255;
}
else if(red < 0){
	red = 0;
}

if(green > 255){
	green = 255;
}
else if(green < 0){
	green = 0;
}

if(blue > 255){
	blue = 255;
}
else if(blue < 0){
	blue = 0;
}

int newPixel = (alpha << ALPHA_OFFSET) | (red << RED_OFFSET) |
						(green << GREEN_OFFSET) | (blue << BLUE_OFFSET);
						
		
result[i] = newPixel;
}



__kernel void seperate_channels(__global const int * data, __global float * redData, __global float * blueData, __global float * greenData, __global float * alphaData){
int ALPHA_MASK = 0xff000000;
int ALPHA_OFFSET = 24;
int RED_MASK = 0x00ff0000;
int RED_OFFSET = 16;
int GREEN_MASK = 0x0000ff00;
int GREEN_OFFSET = 8;
int BLUE_MASK = 0x000000ff;
int BLUE_OFFSET = 0;


int group_id = get_group_id(0);
int group_size   = get_local_size(0);
int local_number = get_local_id(0);

int i = (group_id * group_size) + local_number;


int pixel = data[i];

int red = (pixel & RED_MASK) >> RED_OFFSET;
int green = (pixel & GREEN_MASK) >> GREEN_OFFSET;
int blue = (pixel & BLUE_MASK) >> BLUE_OFFSET;
int alpha = (pixel & ALPHA_MASK) >> ALPHA_OFFSET;

redData[i] = (float) red;
blueData[i] = (float) blue;
greenData[i] = (float) green;
alphaData[i] = (float) alpha;



}