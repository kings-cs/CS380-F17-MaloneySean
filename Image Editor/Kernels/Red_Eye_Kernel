__kernel void average_channels(__global const int * data, __global int * result, __global int * dimensions,  __local int * red_local,
 __local int * blue_local, __local int * green_local){
int RED_MASK = 0x00ff0000;
int RED_OFFSET = 16;
int GREEN_MASK = 0x0000ff00;
int GREEN_OFFSET = 8;
int BLUE_MASK = 0x000000ff;
int BLUE_OFFSET = 0;

int group_id = get_group_id(0);
int group_size   = get_local_size(0);
int local_number = get_local_id(0);

int i = (group_id * group_size) + local_number;

int pixel = data[i];


int red = (pixel & RED_MASK) >> RED_OFFSET;
int green = (pixel & GREEN_MASK) >> GREEN_OFFSET;
int blue = (pixel & BLUE_MASK) >> BLUE_OFFSET;



red_local[local_number] = red;
blue_local[local_number] = blue;
green_local[local_number] = green;

barrier(CLK_LOCAL_MEM_FENCE);	

int distance = 1;
for(int space = group_size / 2; space >= 1; space = space / 2){

	if(local_number < space){
		int i = distance * (2 * local_number + 1) - 1;
		int j = distance * (2 * local_number + 2) - 1;
		
		red_local[j] += red_local[i];
		blue_local[j] += blue_local[i];
		green_local[j] += green_local[i];
	}
	distance = distance * 2;
	barrier(CLK_LOCAL_MEM_FENCE);
}




//result[i] = red_local[local_number];

if(i == get_global_size(0) - 1){
	result[0] = red_local[local_number];
	result[1] = blue_local[local_number];
	result[2] = green_local[local_number];
}

}