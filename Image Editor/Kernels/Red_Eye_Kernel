__kernel void average_channels(__global const int * redData, __global int * result, __local int * red_local){
int group_id = get_group_id(0);
int group_size   = get_local_size(0);
int local_number = get_local_id(0);

int i = (group_id * group_size) + local_number;

int red = redData[i];







red_local[local_number] = red;
//blue_local[local_number] = blue;
//green_local[local_number] = green;

barrier(CLK_LOCAL_MEM_FENCE);	

int distance = 1;
for(int space = group_size / 2; space >= 1; space = space / 2){

	if(local_number < space){
		int i = distance * (2 * local_number + 1) - 1;
		int j = distance * (2 * local_number + 2) - 1;
		
		red_local[j] += red_local[i];
		//blue_local[j] += blue_local[i];
		//green_local[j] += green_local[i];
	}
	distance = distance * 2;
	barrier(CLK_LOCAL_MEM_FENCE);
}



if(group_size - 1 == local_number){
	result[group_id] = red_local[local_number];
}

}



__kernel void calculate_differences(__global const int * redChannel, __global const int * greenChannel, __global const int * blueChannel,
  __global int * redResult, __global int * greenResult, __global int * blueResult, 
  __global int * average,
  __global int * redUnsquared, __global int * greenUnsquared, __global int * blueUnsquared){

int group_id = get_group_id(0);
int group_size   = get_local_size(0);
int local_number = get_local_id(0);

int i = (group_id * group_size) + local_number;

int red = redChannel[i];
int green = greenChannel[i];
int blue = blueChannel[i];


int redAvg = average[0];
int greenAvg = average[1];
int blueAvg = average[2];


int redDiff = red - redAvg;
int greenDiff = green - greenAvg;
int blueDiff = blue - blueAvg;

redResult[i] = (redDiff) * (redDiff); 
greenResult[i] = (greenDiff) * (greenDiff);
blueResult[i] = (blueDiff) * (blueDiff);

redUnsquared[i] = redDiff;
greenUnsquared[i] = greenDiff;
blueUnsquared[i] = blueDiff;



}


__kernel void calculate_ncc(__global const int * sourceRed, __global const int * sourceGreen, __global const int * sourceBlue, 
 __global int * redAverages, __global int * greenAverages, __global int * blueAverages,
__global int * dimArray,
__global int * redSumDiffs, __global int * greenSumDiffs, __global int * blueSumDiffs,
__global int * redUnsquared, __global int * greenUnsquared, __global int * blueUnsquared,
__global int * redProductDiffs, __global int * greenProductDiffs, __global int * blueProductDiffs,
__global int * redTemplateDiffs, __global int * greenTemplateDiffs, __global int * blueTemplateDiffs,
__global float * nccArray) {

int group_id = get_group_id(0);
int group_size   = get_local_size(0);
int local_number = get_local_id(0);

int index = (group_id * group_size) + local_number;


				
int newRed = 0;
int newBlue = 0;
int newGreen = 0;

int width = dimArray[0];
int height = dimArray[1];
int templateWidth = dimArray[2];
int templateHeight = dimArray[3];
				
				
int maxColTrav = templateWidth / 2;
int maxRowTrav =  templateHeight / 2;
int templateSize = (templateWidth * templateHeight);

int divisor = templateSize;

int row = index / width;
int col = index % width;
				
for(int i = row - maxRowTrav; i <= row + maxRowTrav; i++) {
	for(int j = col - maxColTrav; j <= col + maxColTrav; j++) {
					
		int newRow = i;
		int newCol = j;
						
						
						
		
				
				
		if(newRow < 0 || newRow > height - 1 || newCol < 0 || newCol > width - 1){
			divisor--;
		}
		else{
			int currentIndex = newRow * width + newCol;
					
			newRed += sourceRed[currentIndex];
			newGreen += sourceGreen[currentIndex];
			newBlue += sourceBlue[currentIndex];	
		}
						
		
						
		
	}
}
				

				
redAverages[index] = newRed / divisor;
greenAverages[index] = newGreen / divisor;
blueAverages[index] = newBlue / divisor;




int redDiff = 0;
int greenDiff = 0;
int blueDiff = 0;

int redProductDiff = 0;
int greenProductDiff = 0;
int blueProductDiff = 0;

int count = 0;

for(int i = row - maxRowTrav; i <= row + maxRowTrav; i++) {
	for(int j = col - maxColTrav; j <= col + maxColTrav; j++) {
					
		int newRow = i;
		int newCol = j;
						
						
						
		
				
				
		if(newRow < 0 || newRow > height - 1 || newCol < 0 || newCol > width - 1){
			//Legit Nothing
		}
		else{
			int currentIndex = newRow * width + newCol;
					
			int currentRed = sourceRed[currentIndex] - redAverages[index];		
			int currentGreen = sourceGreen[currentIndex] - greenAverages[index];
			int currentBlue = sourceBlue[currentIndex] - blueAverages[index];
			
			redDiff += (currentRed * currentRed);
			greenDiff += (currentGreen * currentGreen);
			blueDiff += (currentBlue * currentBlue);
		
		
			int templateRedUnsquared = redUnsquared[count];
			int templateGreenUnsquared = greenUnsquared[count];
			int templateBlueUnsquared = blueUnsquared[count];
			
			redProductDiff += currentRed * templateRedUnsquared;
			greenProductDiff += currentGreen * templateGreenUnsquared;
			blueProductDiff += currentBlue * templateBlueUnsquared;
		}
						
		
						
		count++;
	}
}


redSumDiffs[index] = redDiff;
greenSumDiffs[index] = greenDiff;
blueSumDiffs[index] = blueDiff;

redProductDiffs[index] = redProductDiff;
greenProductDiffs[index] = greenProductDiff;
blueProductDiffs[index] = blueProductDiff;


float redTemplateDiffSqrt = sqrt((float) redTemplateDiffs[0]);
float greenTemplateDiffSqrt = sqrt((float) greenTemplateDiffs[0]);
float blueTemplateDiffSqrt = sqrt((float) blueTemplateDiffs[0]);

float redSumDiffSqrt = sqrt((float) redDiff);
float greenSumDiffSqrt = sqrt((float) greenDiff);
float blueSumDiffSqrt = sqrt((float) blueDiff);

float redSqrtProduct = redSumDiffSqrt * redTemplateDiffSqrt;
float greenSqrtProduct = greenSumDiffSqrt * greenTemplateDiffSqrt;
float blueSqrtProduct = blueSumDiffSqrt * blueTemplateDiffSqrt;


float redNcc = redProductDiff / redSqrtProduct;
float greenNcc = greenProductDiff / greenSqrtProduct;
float blueNcc = blueProductDiff / blueSqrtProduct;

float ncc = (redNcc * greenNcc * blueNcc);

//int resultNcc = (ncc + MAXFLOAT) * 1000;

nccArray[index] = ncc;

}



__kernel void min_float_reduce(__global const float * nccData, __global float * result, __local float * local_data){
int group_id = get_group_id(0);
int group_size   = get_local_size(0);
int local_number = get_local_id(0);

int i = (group_id * group_size) + local_number;

float current = nccData[i];







local_data[local_number] = current;


barrier(CLK_LOCAL_MEM_FENCE);	

int distance = 1;
for(int space = group_size / 2; space >= 1; space = space / 2){

	if(local_number < space){
		int i = distance * (2 * local_number + 1) - 1;
		int j = distance * (2 * local_number + 2) - 1;
		
	
		
		if(local_data[j] > local_data[i]){
			local_data[j] = local_data[i];
		}

	}
	distance = distance * 2;
	barrier(CLK_LOCAL_MEM_FENCE);
}



if(group_size - 1 == local_number){
	result[group_id] = local_data[local_number];
}

}









__kernel void pad_float_min(__global const float * nccData, __global float * result, __global int * padSize){

int i = (get_group_id(0) * get_local_size(0)) + get_local_id(0);

int pad = padSize[0];

if(i < pad){
	result[i] = nccData[i];
}
else{
	result[i] = INFINITY;
}


}













__kernel void seperate_channels(__global const int * data, __global int * redData, __global int * blueData, __global int * greenData){
int RED_MASK = 0x00ff0000;
int RED_OFFSET = 16;
int GREEN_MASK = 0x0000ff00;
int GREEN_OFFSET = 8;
int BLUE_MASK = 0x000000ff;
int BLUE_OFFSET = 0;


int group_id = get_group_id(0);
int group_size   = get_local_size(0);
int local_number = get_local_id(0);

int i = (group_id * group_size) + local_number;


int pixel = data[i];

int red = (pixel & RED_MASK) >> RED_OFFSET;
int green = (pixel & GREEN_MASK) >> GREEN_OFFSET;
int blue = (pixel & BLUE_MASK) >> BLUE_OFFSET;


redData[i] = red;
blueData[i] = blue;
greenData[i] = green;




}


