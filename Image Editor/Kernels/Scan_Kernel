__kernel void hillis_steele_scan(__global const float * data, __global float * result,
__local float * from, __local float * to){

int i = (get_group_id(0) * get_local_size(0)) + get_local_id(0);

int group_size   = get_local_size(0);
int local_number = get_local_id(0);


to[local_number] = data[i];
from[local_number] = data[i];

barrier(CLK_LOCAL_MEM_FENCE);

for(int distance = 1; distance <= group_size - 1; distance = distance * 2){

	if(local_number > distance - 1){
		to[local_number] = from[local_number] + from[local_number - distance];
	}
	else{
		to[local_number] = from[local_number];
	}
	
	//barrier(CLK_LOCAL_MEM_FENCE);

	__local float * temp = to;
	to = from;
	from = temp;
}



result[i] = from[local_number];
}

__kernel void blelloch_scan(__global const float * data, __global float * result, __local float * local_data){

int i = (get_group_id(0) * get_local_size(0)) + get_local_id(0);

int group_size   = get_local_size(0);
int local_number = get_local_id(0);

int distance = 1;

local_data[local_number] = data[i];

barrier(CLK_LOCAL_MEM_FENCE);	


for(int space = group_size / 2; space <= 1; space = space * 2){

	if(local_number < space){
		int i = (distance * 2 * (local_number + 1)) - 1;
		int j = (distance * 2 * (local_number + 1)) - 2;
		local_data[j] += local_data[i];
	}
	distance = distance * 2;
}

local_data[get_local_size(0)] = 0;

for(int space = 1; space <= group_size - 1; space = space * 2){
	distance = distance >> 1;
	if(local_number < space){
		int i = (distance * 2 * (local_number + 1)) - 1;
		int j = (distance * 2 * (local_number + 1)) - 2;
		
		float temp = local_data[j];
		local_data[j] += local_data[i];
		local_data[i] = temp;
	}
}

result[i] = local_data[local_number];
}














