__kernel void hillis_steele_scan(__global const int * data, __global int * result,
__local float * from, __local float * to){

int i = (get_group_id(0) * get_local_size(0)) + get_local_id(0);

int group_size   = get_local_size(0);
int local_number = get_local_id(0);


to[local_number] = data[i];
from[local_number] = data[i];

barrier(CLK_LOCAL_MEM_FENCE);

for(int distance = 1; distance <= group_size - 1; distance = distance * 2){

	if(local_number > distance - 1){
		to[local_number] = from[local_number] + from[local_number - distance];
	}
	else{
		to[local_number] = from[local_number];
	}
	
	//barrier(CLK_LOCAL_MEM_FENCE);

	__local float * temp = to;
	to = from;
	from = temp;
}



result[i] = from[local_number];
}









__kernel void blelloch_scan(__global const int * data, __global int * result, __global int * accumulator,
 __local int * local_data){

int group_id = get_group_id(0);
int group_size   = get_local_size(0);
int local_number = get_local_id(0);

int i = (group_id * group_size) + local_number;


local_data[local_number] = data[i];

barrier(CLK_LOCAL_MEM_FENCE);	

int distance = 1;
for(int space = group_size / 2; space >= 1; space = space / 2){

	if(local_number < space){
		int i = distance * (2 * local_number + 1) - 1;
		int j = distance * (2 * local_number + 2) - 1;
		local_data[j] += local_data[i];
	}
	distance = distance * 2;
	barrier(CLK_LOCAL_MEM_FENCE);
}



if(local_number == 0){
local_data[get_local_size(0) - 1] = 0;
}


for(int space = 1; space < group_size; space = space * 2){
	
	distance = distance / 2;
	
	if(local_number < space){
		int i = distance * (2 * local_number + 1) - 1;
		int j = distance * (2 * local_number + 2) - 1;
		
		float temp = local_data[j];
		local_data[j] += local_data[i];
		local_data[i] = temp;
	}
	barrier(CLK_LOCAL_MEM_FENCE);
	
}

if(group_size - 1 == local_number){
accumulator[group_id] = local_data[local_number] + data[i];
}

result[i] = local_data[local_number];
}

__kernel void add_increments(__global const int * data, __global int * result, __global int * increments,
__global int * maxSize){

int group_id = get_group_id(0);
int i = (group_id * get_local_size(0)) + get_local_id(0);

result[i] = data[i] + increments[i / maxSize[0]];


}


__kernel void pad_array(__global const int * data, __global int * result, __global int * padSize){

int i = (get_group_id(0) * get_local_size(0)) + get_local_id(0);

int pad = padSize[0];

if(i < pad){
	result[i] = data[i];
}
else{
	result[i] = 0;
}


}












