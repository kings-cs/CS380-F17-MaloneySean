__kernel void sepia_kernel(__global const int *sourceData,__global int *resultData){
int ALPHA_MASK = 0xff000000;
int ALPHA_OFFSET = 24;
int RED_MASK = 0x00ff0000;
int RED_OFFSET = 16;
int GREEN_MASK = 0x0000ff00;
int GREEN_OFFSET = 8;
int BLUE_MASK = 0x000000ff;
int BLUE_OFFSET = 0;

int SEPIA_DEPTH = 20;
int SEPIA_INTENSITY = 30;


int i = get_global_id(0);

int pixel = sourceData[i];
				
int alpha = (pixel & ALPHA_MASK) >> ALPHA_OFFSET;				
int red = (pixel & RED_MASK) >> RED_OFFSET;
int green = (pixel & GREEN_MASK) >> GREEN_OFFSET;
int blue = (pixel & BLUE_MASK) >> BLUE_OFFSET;
				
float average = (red + green + blue) / 3;
				

				
int newRed = average + (SEPIA_DEPTH * 2);
int newBlue = average - SEPIA_INTENSITY;
int newGreen = average + SEPIA_DEPTH;

newRed = clamp(newRed, 0, 255);
newBlue = clamp(newBlue, 0, 255);
newGreen = clamp(newGreen, 0, 255);		
			
int sepiaPixel = (alpha << ALPHA_OFFSET) | (newRed << RED_OFFSET) |(newGreen << GREEN_OFFSET) | (newBlue << BLUE_OFFSET);
				
				
resultData[i] = sepiaPixel;
}