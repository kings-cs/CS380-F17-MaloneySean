__kernel void seperateChannel_Kernel(__global const int *sourceData, __global int * redArray,
__global int * greenArray, __global int * blueArray, __global int * alphaArray){

int ALPHA_MASK = 0xff000000;
int ALPHA_OFFSET = 24;
int RED_MASK = 0x00ff0000;
int RED_OFFSET = 16;
int GREEN_MASK = 0x0000ff00;
int GREEN_OFFSET = 8;
int BLUE_MASK = 0x000000ff;
int BLUE_OFFSET = 0;



int i = (get_group_id(0) * get_local_size(0)) + get_local_id(0);

int pixel = sourceData[i];


int alpha = (pixel & ALPHA_MASK) >> ALPHA_OFFSET;
int red = (pixel & RED_MASK) >> RED_OFFSET;
int green = (pixel & GREEN_MASK) >> GREEN_OFFSET;
int blue = (pixel & BLUE_MASK) >> BLUE_OFFSET;

redArray[i] = red;
greenArray[i] = green;
blueArray[i] = blue;
alphaArray[i] = alpha;
}


__kernel void stencilChannel_Kernel(__global const int *sourceData, __global int * redArray, __global int * greenArray, 
__global int * blueArray, __global int * redAvg, __global int * greenAvg, __global int * blueAvg, __global int * dimArray){

float filter[] = {0.0232468, 0.0338240, 0.0383276, 0.0338240, 0.0232468,
				0.0338240, 0.0492136, 0.0557663, 0.0492136, 0.0338240,
				0.0383276, 0.0557663, 0.0631915, 0.0557663, 0.0383276,
				0.0338240, 0.0492136, 0.0557663, 0.0492136, 0.0338240,
				0.0232468, 0.0338240, 0.0383276, 0.0338240, 0.0232468};

//Change back to get_global_id(0) if need be
int i = (get_group_id(0) * get_local_size(0)) + get_local_id(0);

int count = 0;
				
float newRed = 0;
float newBlue = 0;
float newGreen = 0;
				
int maxTrav = 2;

int width = dimArray[0];
int height = dimArray[1];

int row = i / width;
int col = i % width;
				
for(int i = row - maxTrav; i <= row + maxTrav; i++) {
	for(int j = col - maxTrav; j <= col + maxTrav; j++) {
					
		int newRow = i;
		int newCol = j;
						
						
						
		if(newRow < 0) {
			newRow = 0;
		}
		else if(newRow > height - 1) {
			newRow = height - 1;
		}
						
		if(newCol < 0) {
			newCol = 0;
		}
		else if(newCol > width - 1) {
			newCol = width - 1;
		}
						
		int currentIndex = newRow * width + newCol;
					
		newRed += redArray[currentIndex] * filter[count];
		newGreen += greenArray[currentIndex] * filter[count];
		newBlue += blueArray[currentIndex] * filter[count];
						
		count++;
	}
}
				

				
redAvg[i] = (int) newRed;
greenAvg[i] = (int) newGreen;
blueAvg[i] = (int) newBlue;
}



__kernel void recombineChannel_Kernel(__global int *resultData, __global int * alphaArray, __global int * redAvg, __global int * greenAvg, __global int * blueAvg){

int ALPHA_MASK = 0xff000000;
int ALPHA_OFFSET = 24;
int RED_MASK = 0x00ff0000;
int RED_OFFSET = 16;
int GREEN_MASK = 0x0000ff00;
int GREEN_OFFSET = 8;
int BLUE_MASK = 0x000000ff;
int BLUE_OFFSET = 0;


int i = (get_group_id(0) * get_local_size(0)) + get_local_id(0);

int blurPixel = (alphaArray[i] << ALPHA_OFFSET) | (redAvg[i] << RED_OFFSET) |
						(greenAvg[i] << GREEN_OFFSET) | (blueAvg[i] << BLUE_OFFSET);
				
resultData[i] = blurPixel;
}
