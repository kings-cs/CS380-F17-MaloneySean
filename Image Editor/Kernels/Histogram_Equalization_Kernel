__kernel void calculate_histogram(__global const int * imageRaster, __global const int * dimensions,  
__global int * bins){

	int RED_MASK = 0x00ff0000;
	int RED_OFFSET = 16;

	int i = (get_group_id(0) * get_local_size(0)) + get_local_id(0);

	int numBins = dimensions[0];
		
	int currentValue = (imageRaster[i] & RED_MASK) >> RED_OFFSET;
	atomic_add(&bins[currentValue], 1);
}






__kernel void optimized_calculate_histogram(__global const int * imageRaster, __global const int * dimensions,  
__global int * result, __local int * binCopy){

	int RED_MASK = 0x00ff0000;
	int RED_OFFSET = 16;

	int i = (get_group_id(0) * get_local_size(0)) + get_local_id(0);
	
	
	__const int numBins = dimensions[0];
	int numPixels = dimensions[1];
	int height = dimensions[2];
	int width = dimensions[3];
	
	
	
	int start = get_group_id(0) * width;
	for(int j = 0; j < width; j++){
		int index = start + j;
		if(index < numPixels){
			int currentValue = (imageRaster[index] & RED_MASK) >> RED_OFFSET;
			//int currentValue = imageRaster[index];
			binCopy[currentValue]++;
		}
	} 
	

	
	start = get_group_id(0) * numBins;
	for(int j = 0; j < numBins; j++){
		int index = start + j;
		if(index < (height * numBins)){	
			result[index] = binCopy[j];
		}
	}
	
	

	
	
}


__kernel void global_reduce_kernel(__global int * data, __global const int * dimensions,  __global int * result){
	int itemIndex = get_local_id(0);
	int index = get_local_size(0) * get_group_id(0) + itemIndex;
	
	for(int i = get_local_size(0) / 2; i > 0; i >>= 1){
		if(itemIndex < i){
			data[index] += data[index + i];
		}
		barrier(CLK_GLOBAL_MEM_FENCE);
	}
	
	if(itemIndex == 0){
		result[index] = data[index];
	}
}


__kernel void idealize_histogram(__global const int * histogram, __global const int * dimensions,  __global int * ideal){
	int i = (get_group_id(0) * get_local_size(0)) + get_local_id(0);
	
	int numBins = dimensions[0];
	int pixelCount = dimensions[1];
	
	int avg = pixelCount / numBins;
	int leftOver = pixelCount - (avg * numBins);
	int mid = (numBins - 1) / 2;
	int extraStart = mid - (leftOver / 2);
	int extraEnd = extraStart + leftOver;
	
	if (i >= extraStart && i < extraEnd) {
		ideal[i] = avg + 1;
	} 
	else {
		ideal[i] = avg;
	}
}











__kernel void map_histogram(__global const int * cuf, __global const int * cuFeq, __global int * mapping){
	int i = (get_group_id(0) * get_local_size(0)) + get_local_id(0);
	
	int mapping_length = get_global_size(0);
	
	int mapKey = 0;
	int current = cuf[i];
	
	int bestDif = (int) MAXFLOAT;
	int lastDif = (int) MAXFLOAT;;
	
	
	int j = 0;
	bool foundClosest = false;
	
	while (!foundClosest && j < mapping_length) {
	 	int feqCurrent = cuFeq[j];
		int currentDif = abs(current - feqCurrent);
	
		if (currentDif < bestDif) {
			bestDif = currentDif;
			mapKey = j;
		}
	
		// TODO: If this ends up bugged, comment this out until bug is found.
		lastDif = currentDif;
		if (lastDif > currentDif) {
			foundClosest = true;
		}
	
		j++;
	}
	
	mapping[i] = mapKey;
}





__kernel void map_pixels(__global const int * mapping, __global const int * original, __global int * result){
	int ALPHA_MASK = 0xff000000;
	int ALPHA_OFFSET = 24;
	int RED_MASK = 0x00ff0000;
	int RED_OFFSET = 16;
	int GREEN_MASK = 0x0000ff00;
	int GREEN_OFFSET = 8;
	int BLUE_MASK = 0x000000ff;
	int BLUE_OFFSET = 0;
	//Should probably go back and fix my parameters to better follow convention.
	
	int i = (get_group_id(0) * get_local_size(0)) + get_local_id(0);
	
	
	int pixel = original[i];
	
	int grayVal = (pixel & RED_MASK) >> RED_OFFSET;
	
	int newGray = mapping[grayVal];
	
	int alpha = (pixel & ALPHA_MASK) >> ALPHA_OFFSET;
	
	int resultColor = (alpha << ALPHA_OFFSET) | (newGray << RED_OFFSET) | (newGray << BLUE_OFFSET)
						| (newGray << GREEN_OFFSET);
	
	result[i] = resultColor;
}